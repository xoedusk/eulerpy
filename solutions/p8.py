# p?.py
#
# Solution to Project Euler problem ?
#
# Find the greatest product of five consecutive digits in the 1000-digit number.
#
#73167176531330624919225119674426574742355349194934
#96983520312774506326239578318016984801869478851843
#85861560789112949495459501737958331952853208805511
#12540698747158523863050715693290963295227443043557
#66896648950445244523161731856403098711121722383113
#62229893423380308135336276614282806444486645238749
#30358907296290491560440772390713810515859307960866
#70172427121883998797908792274921901699720888093776
#65727333001053367881220235421809751254540594752243
#52584907711670556013604839586446706324415722155397
#53697817977846174064955149290862569321978468622482
#83972241375657056057490261407972968652414535100474
#82166370484403199890008895243450658541227588666881
#16427171479924442928230863465674813919123162824586
#17866458359124566529476545682848912883142607690042
#24219022671055626321111109370544217506941658960408
#07198403850962455444362981230987879927244284909188
#84580156166097919133875499200524063689912560717606
#05886116467109405077541002256983155200055935729725
#71636269561882670428252483600823257530420752963450

# ALGORITHM
# Convert number to a list of digits. Then read, from left to right, chunks of
# list of appropriate size. Compute product, check against biggest product
# thus far.

import math

def largestProductFromConsecutiveNumbers(number, numFactors):
    '''biggestProductFromConsecutiveNumbers(number, numFactors) -> integer
    
    Returns the biggest product of numFactors consecutive digits in number.
    The argument number is automatically converted to an integer prior to
    processing.'''
    
    number = int(number)
    
    if number == 0 and numFactors == 1:
        return 0
    
    if numFactors > int(math.log10(number)) + 1:
        raise ValueError, "numFactors cannot be greater than number of digits "\
            "in number"
    if not isinstance(numFactors, int):
        raise TypeError, "number and numFactors argumentns must be integers"
    if number < 0:
        raise ValueError, "number must be positive"
    if not numFactors >= 1:
        raise ValueError, "numFactors must be 1 or greater"
    
    numberList = [int(d) for d in str(number)]
    
    maxProduct = 0 # This will be the return value of this function
    index = 0 # Remember where we are in numerList
    
    while index + numFactors <= len(numberList):
        newProduct = 1 # 0 would be silly with the following for loop
        for d in numberList[index:index + numFactors]:
            newProduct *= d
        if newProduct > maxProduct:
            maxProduct = newProduct
        index += 1
    
    return maxProduct

if __name__ == '__main__':
    num = '73167176531330624919225119674426574742355349194934'\
        '96983520312774506326239578318016984801869478851843'\
        '85861560789112949495459501737958331952853208805511'\
        '12540698747158523863050715693290963295227443043557'\
        '66896648950445244523161731856403098711121722383113'\
        '62229893423380308135336276614282806444486645238749'\
        '30358907296290491560440772390713810515859307960866'\
        '70172427121883998797908792274921901699720888093776'\
        '65727333001053367881220235421809751254540594752243'\
        '52584907711670556013604839586446706324415722155397'\
        '53697817977846174064955149290862569321978468622482'\
        '83972241375657056057490261407972968652414535100474'\
        '82166370484403199890008895243450658541227588666881'\
        '16427171479924442928230863465674813919123162824586'\
        '17866458359124566529476545682848912883142607690042'\
        '24219022671055626321111109370544217506941658960408'\
        '07198403850962455444362981230987879927244284909188'\
        '84580156166097919133875499200524063689912560717606'\
        '05886116467109405077541002256983155200055935729725'\
        '71636269561882670428252483600823257530420752963450'
    print "The answer to problem 8 is "\
        "%d" % largestProductFromConsecutiveNumbers(num, 5)