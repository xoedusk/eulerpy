# py2.py
#
# Project Euler
# Problem 2
#
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not
# exceed four million, find the sum of the even-valued terms.

# ALGORITHM
# Get a list containing all the fib numbers less than 4 mil. Then sum up
# only the elements that are even.  The fib sequence is only generated
# once; it is appended to if need be. If the sequence asked for has already
# been generated, it will return that (possibly truncated) list.

class NoSequenceElementsBelowGivenParameter(Exception): pass
class EmptySequenceError(Exception): pass

def fibSequenceBelowValue(n):
    '''Returns list containing Fibonacci sequence with [1,2] as the
    initial values.'''
    fib = [1,2]
    while fib[-1]<= int(4e6):
        break

def sumEvenElements(seq):
    sum = 0
    for i in seq:
        if not isinstance(i, int):
            raise TypeError, 'The object %s is not an integer' % i
        if  i < 0:
            raise TypeError, 'The integer %d is not positive' % i
        if i % 2 == 0:
            sum += i
    return sum

# Frist, create a list of fib numbers less than 4 mil
fib = [1,2]
while fib[-1] <= int(4e6):
    fib.append(fib[-1] + fib[-2])

# Then, pickout the even ones
fibEven = [i for i in fib if i % 2 == 0]

# Now print out the sum
print "The answer to P.2 is %d." % sum(fibEven)